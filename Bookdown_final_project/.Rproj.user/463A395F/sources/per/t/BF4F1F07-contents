# Intro - Database Structure

This chapter describes the process of designing and building my database.

## Designing the Database
### Tables
The first summer's data was already collected. Data was sorted 
into 4 tables. 
The first table is Condor_individuals, which holds information 
on each condor and its characteristics, such as sex and birth 
date. The second table is Carcasses, which stores carcass 
information such as when I put out each carcass, carcass 
weight, and habitat information on each carcass location. The 
third table, Video_metadata, includes data that helped me to 
organize during the field season and afterwards when looking at
videos, such as the video id number, name of the SD card that 
the video is on, and carcass descriptions. The fourth excel sheet is names 
Visits. It holds all observations of visits by any scavenger, and information
pertaining to that visit, such as duration of visit, weather condition at 
arrival, and times spent doing different activities, such as feeding time.
### Organization
Once I organize data into tables, I can create a relational flowchart 
showing how the tables are related. 
knitr::include_graphics("Relational_flowchart.PNG")

## Coding the database
First I loaded the package DBI, which allows communication between R and the 
relational database, in this case, SQL.
```{r}
library(DBI)
```
Then I can create and connect to a relational database, in this case, called "condors", and storing it within an object also called "Condors"
```{r}
Condors <- dbConnect(RSQLite::SQLite(), "condors.db")
```
### Creating tables
Now I can begin building tables. I'll start with Condor_individuals.
The code below creates a blank table called Condor_individuals with columns 
for Condor_ID, Studbook_Number, Sex, Birthdate, et cetera. The type of data 
that can fit within each column is specified after the column name. For 
example, Sex is a single character, while Paired_with_2022 is an integer that
can contain 4 numbers (as this is the studbook number of the condor that that
individual was paired with in 2022, and studbook numbers can be up to 4 
integers). At the end, PRIMARY KEY denotes which column acts as the unique 
identifier for each row.
``` {r}
dbExecute(Condors, "CREATE TABLE Condor_individuals (
Condor_ID char(2) NOT NULL,
Studbook_Number int(4),
Sex char(1),
Birthdate date,
Paired_with_2022 int(4),
Paired_with_2023 int(4),
Biological_offspring varchar(500),
Biological_siblings varchar(500),
PRIMARY KEY (Condor_ID)
);")
```
This pattern is continued for creating other tables. At the end of tables with columns that reference other columns in other tables, I included the following code right after my last column:
```{r}
FOREIGN KEY(Column_in_this_table) REFERENCES Other_table(Column_in_other_table)
```
So, for example, this creates an appended version of my Visits table. I have removed several columns for clarity. The last two lines are creating relations between tables, so that the Carcass column is linked to ID_numer within the Carcasses table, and Individual column is linked to Condor_ID column in Condor_individuals table.
```{r}
dbExecute(Condors, "CREATE TABLE Visits (
ID INTEGER PRIMARY KEY,
Visit_per_individual int(2),
Carcass int(3),
Species varchar(15),
Individual varchar(2),
Time_arrive time,
Wind int(1),
Temp int(3),
%_eaten_at_arrival int(3),
Time_leave time,
%_eaten_at_leaving int(3),
Feeding_time double,
Vigilance_time double,
Out_of_frame/unsure double,
FOREIGN KEY(Carcass) REFERENCES Carcasses(ID_number)
FOREIGN KEY(Individual) REFERENCES Condor_individuals(Condor_ID)
);")
```
### Adding data to tables
Now that empty tables exist, data can be put into them. I simply read my file containing my data into a new object and then append that table, including all the rows of data, with the empty tables I just created. This combines all my data with the empty table containing all the rules (for example, that the column can only contain rows of a single integer).
```{r}
Visits<-read.csv("C:/Users/albla/OneDrive - USU/Thesis Research/Visits.csv",
                         stringsAsFactors=FALSE)
dbWriteTable(Condors,"Visits",Visits,append=TRUE)
```
I made sure to check that the data was loaded in using 
```{r}
dbGetQuery(Condors, "SELECT * FROM Visits LIMIT 10;")
```
which prints the first 10 rows of data from the table Visits.

### An unnumbered section {-}

Chapters and sections are numbered by default. To un-number a heading, add a `{.unnumbered}` or the shorter `{-}` at the end of the heading, like in this section.
